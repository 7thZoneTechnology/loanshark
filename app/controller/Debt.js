/*
 * File: app/controller/Debt.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Payback.controller.Debt', {
    extend: 'Ext.app.Controller',
    config: {
        refs: {
            DebtDetail: {
                selector: 'DebtDetail',
                xtype: 'DebtDetail',
                autoCreate: true
            },
            myDebtDataView: '#myDebtDataView'
        },

        control: {
            "#addDebt": {
                tap: 'onAddDebtTap'
            },
            "#saveDebt": {
                tap: 'onSaveDebtTap'
            },
            "#cancelDebt": {
                tap: 'onCanelButtonTap'
            },
            "#myDebtDataView": {
                itemswipe: 'onDataviewItemSwipe'
            }
        }
    },

    onAddDebtTap: function(button, e, options) {
        Ext.Viewport.setActiveItem(this.getDebtDetail());
    },

    onSaveDebtTap: function(button, e, options) {
        var form = this.getDebtDetail(),
            values = form.getValues(),
            person = this.getDebtDetail().down('selectfield').record;


        var debt = person.debts().add(values)[0];
        person.debts().sync();
        person.calcBalance();                           

        debt.getPerson();
        //debt.getData(true);
        Ext.getStore('Debts').load();

        Ext.getStore('People').load(function(){
        this.getApplication().getController('Summary').updateSummary();},
        this);

        Ext.Viewport.setActiveItem(0);


    },

    onCanelButtonTap: function(button, e, options) {
        this.getDebtDetail().reset();
        Ext.Viewport.setActiveItem(0);
    },

    onDataviewItemSwipe: function(dataview, index, target, record, e, options) {
        var deleteButtons = dataview.query('button');

        for (var i=0; i < deleteButtons.length; i++) {
            deleteButtons[i].hide();
        }

        target.query('button')[0].show();

        Ext.Viewport.element.on({tap:function(){
            target.query('button')[0].hide();
        }, single:true});




    }

});