/*
 * File: app/controller/Payment.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Payback.controller.Payment', {
    extend: 'Ext.app.Controller',
    config: {
        stores: [
            'PaymentStore'
        ],

        refs: {
            PaymentDetail: {
                selector: 'PaymentDetail',
                xtype: 'PaymentDetail',
                autoCreate: true
            },
            DebtDetail: {
                selector: 'DebtDetail',
                xtype: 'DebtDetail',
                autoCreate: true
            }
        },

        control: {
            "#addPayment": {
                tap: 'onAddPaymentTap'
            },
            "#cancelPayment": {
                tap: 'onCancelButtonTap'
            },
            "#savePayment": {
                tap: 'onSavePaymentTap'
            },
            "#myPaymentDataView": {
                itemtap: 'onDataviewItemTap',
                itemswipe: 'onDataviewItemSwipe'
            }
        }
    },

    onAddPaymentTap: function(button, e, options) {

        var form = this.getPaymentDetail();

        form.reset(); //clears form
        form.setRecord(null); //clears record from form

        form.setValues({debt_id:this.getDebtDetail().getRecord().get('id')});

        //set active item
        Ext.Viewport.setActiveItem(form);
    },

    onCancelButtonTap: function(button, e, options) {
        this.getPaymentDetail().reset(); //clears form

        //set active item
        Ext.Viewport.setActiveItem(this.getDebtDetail());
    },

    onSavePaymentTap: function(button, e, options) {
        var form = this.getPaymentDetail(),
            record = form.getRecord(),
            values = form.getValues(),
            debt = this.getDebtDetail().getRecord();

        if(record) { //if editing record
            record.set(values);
            record.save();
        } else { //if new record
            var payment = debt.payments().add(values)[0];
            debt.payments().sync();
            payment.getDebt(); //bug in framework, associates payment with debt

            delete debt.paymentsStore; //bug in framework, debt_id is not correctly set in filter, work around is to delete the store
            debt.payments();

            debt.set('balance',0);
        }

        //BUG HERE! For some reason new payments don't get added to new debts
        //debt.getAssociatedData();
        //debt.set('id',debt.get('id'));
        //Ext.getStore('Debts').getAt()

        //loads data from localStorage
        Ext.getStore('Payments').load();

        //set active item
        Ext.Viewport.setActiveItem(this.getDebtDetail());

    },

    onDataviewItemTap: function(dataview, index, target, record, e, options) {

        var form = this.getPaymentDetail();

        form.setRecord(record); //set form record

        //set active item
        Ext.Viewport.setActiveItem(form);
    },

    onDataviewItemSwipe: function(dataview, index, target, record, e, options) {
        var deleteButtons = dataview.query('button');

        //hide other buttons0
        for (var i=0; i < deleteButtons.length; i++) {
            deleteButtons[i].hide();
        }

        //show current button
        target.query('button')[0].show();

        //hide button after being tapped
        Ext.Viewport.element.on({tap:function(){
            target.query('button')[0].hide();
        }, single:true});
    }

});